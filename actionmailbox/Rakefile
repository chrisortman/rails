# frozen_string_literal: true

require "bundler/setup"
require "bundler/gem_tasks"
require "rake/testtask"

PRIVATE_KEY = 'test/fixtures/files/amazon/privatekey.pem' 
CERTIFICATE = 'test/fixtures/files/amazon/certificate.pem' 
AWS_FIXTURES = FileList["test/fixtures/files/amazon/*.json"]

task :package

Rake::TestTask.new do |t|
  t.libs << "test"
  t.pattern = "test/**/*_test.rb"
  t.verbose = true
end

file PRIVATE_KEY do |t|
  require 'openssl'
  key = OpenSSL::PKey::RSA.new 2048
  File.open(t.name, 'w') do |f|
    f.write key.to_pem
  end
end

file CERTIFICATE => PRIVATE_KEY do |t|
  require 'openssl'
  key = OpenSSL::PKey::RSA.new File.read(PRIVATE_KEY)
  cert = OpenSSL::X509::Certificate.new
  cert.version = 2
  cert.serial = 2
  cert.subject = OpenSSL::X509::Name.parse "/DC=org/DC=ruby-lang/CN=Ruby certificate"
  cert.issuer = cert.subject # root CA is the issuer
  cert.public_key = key.public_key
  cert.not_before = Time.now
  cert.not_after = cert.not_before + 1 * 365 * 24 * 60 * 60 # 10 years validity
  ef = OpenSSL::X509::ExtensionFactory.new
  ef.subject_certificate = cert
  ef.issuer_certificate = cert
  cert.add_extension(ef.create_extension("keyUsage","digitalSignature", true))
  cert.add_extension(ef.create_extension("subjectKeyIdentifier","hash",false))
  cert.sign(key, OpenSSL::Digest::SHA256.new)

  File.open(t.name, 'w') do |f|
    f.write cert.to_pem
  end
end
task :certificates => [PRIVATE_KEY, CERTIFICATE]


task :sign_aws_fixtures => :certificates do
  require 'openssl'
  require 'json'
  require 'base64'

  key = OpenSSL::PKey::RSA.new File.read(PRIVATE_KEY)
  cert = OpenSSL::X509::Certificate.new File.read(CERTIFICATE)

  AWS_FIXTURES.each do |fixture|
    data = JSON.parse File.read(fixture)
    string = build_signing_string data
    signed_string = key.sign("SHA1", string)
    data["Signature"] = Base64.encode64(signed_string)
    File.open(fixture, 'w') do |fw|
      fw.write JSON.pretty_generate(data)
    end
  end
end

task default: :test

def build_signing_string(data)
  case data["Type"]
  when "Notification"
    keys = %w( Message MessageId Timestamp TopicArn Type )
    keys.insert(2, "Subject") if data.has_key?("Subject")
  when "SubscriptionConfirmation","UnsubscribeConfirmation"
    keys = %w(Message MessageId SubscribeURL Timestamp Token TopicArn Type)
  else
    raise "Unknown message type #{data["Type"]}"
  end

  string = []
  data.slice(*keys).each_pair do |k,v|
    string << k
    string << v
  end
  string.join("\n")
end
